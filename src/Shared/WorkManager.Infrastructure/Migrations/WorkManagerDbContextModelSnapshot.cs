// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkManager.Infrastructure.Data;

#nullable disable

namespace WorkManager.Infrastructure.Migrations
{
    [DbContext(typeof(WorkManagerDbContext))]
    partial class WorkManagerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("TodoManagement.Core.Entities.TodoItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT")
                        .HasComment("When the todo was marked as completed");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')")
                        .HasComment("When the todo was created");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("TEXT")
                        .HasComment("Optional deadline for completion");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT")
                        .HasComment("Optional detailed description");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER")
                        .HasComment("Priority value from 1 (Very Low) to 5 (Very High)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasComment("Current status of the todo item");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasComment("The title/name of the todo item");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasComment("When the todo was last modified");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_TodoItems_CreatedAt");

                    b.HasIndex("Deadline")
                        .HasDatabaseName("IX_TodoItems_Deadline");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_TodoItems_Status");

                    b.HasIndex("Status", "Priority")
                        .HasDatabaseName("IX_TodoItems_Status_Priority");

                    b.ToTable("TodoItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12345678-1234-5678-9abc-123456789012"),
                            CreatedAt = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "This is your first todo item. Try editing it, changing its status, or creating new ones.",
                            Priority = 3,
                            Status = "Todo",
                            Title = "Welcome to Work Management App! 🎉",
                            UpdatedAt = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("TodoManagement.Core.Entities.TodoLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasComment("Type of action performed");

                    b.Property<DateTime>("ChangedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')")
                        .HasComment("When the change occurred");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasComment("Human-readable description of the change");

                    b.Property<string>("NewValue")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasComment("New value after change");

                    b.Property<string>("OldValue")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasComment("Previous value before change");

                    b.Property<Guid>("TodoItemId")
                        .HasColumnType("TEXT")
                        .HasComment("Reference to the todo item");

                    b.HasKey("Id");

                    b.HasIndex("ChangedAt")
                        .HasDatabaseName("IX_TodoLogs_ChangedAt");

                    b.HasIndex("TodoItemId")
                        .HasDatabaseName("IX_TodoLogs_TodoItemId");

                    b.ToTable("TodoLogs");
                });

            modelBuilder.Entity("TodoManagement.Core.Entities.TodoLog", b =>
                {
                    b.HasOne("TodoManagement.Core.Entities.TodoItem", "TodoItem")
                        .WithMany("Logs")
                        .HasForeignKey("TodoItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TodoItem");
                });

            modelBuilder.Entity("TodoManagement.Core.Entities.TodoItem", b =>
                {
                    b.Navigation("Logs");
                });
#pragma warning restore 612, 618
        }
    }
}
